% \section{OpenType definitions code}
%
% \iffalse
%    \begin{macrocode}
%<*fontspec&(xetexx|luatex)>
%    \end{macrocode}
% \fi
%
%
%
% \begin{macro}{\@@_define_opentype_feature_group:n}
%    \begin{macrocode}
\cs_new:Nn \@@_define_opentype_feature_group:n
  { \keys_define:nn {fontspec-opentype} { #1 .multichoice: } }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@@_define_opentype_feature_dual:nnnn}
%    \begin{macrocode}
\cs_new:Nn \@@_define_opentype_feature_dual:nnnn
 {
  \@@_define_opentype_feature:nnnnn {#1}{#2}{#3}{+#3}{#4}
  \@@_define_opentype_feature:nnnnn {#1}{No#2}{#3}{-#3}{  }
  \@@_define_opentype_feature:nnnnn {#1}{Reset#2}{}{}{+#3,-#3}
 }
\cs_new:Nn \@@_define_opentype_feature:nnnnn
 {
  \keys_define:nn {fontspec-opentype}
   {
    #1/#2 .code:n = { \@@_make_OT_feature:nnn {#3}{#4}{#5} }
   }
 }
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Adding features when loading fonts}
%
% When remove clashing features,
% \begin{enumerate}
% \item remove the feature being added (to avoid duplicates);
% \item remove the inverse of the feature (to avoid cancellation);
% \item finally remove all clashing features.
% \end{enumerate}
%
%    \begin{macrocode}
\cs_new:Nn \@@_make_OT_feature:nnn
  {
%<debug>  \typeout{:: @@_make_OT_feature:nnn {\exp_not:n{#1}{#2}{#3}}}

    \bool_set_true:N \l_@@_proceed_bool
    \bool_set_true:N  \l_@@_check_feat_bool

    \tl_if_empty:nT {#1} { \bool_set_false:N \l_@@_check_feat_bool }
    \bool_if:NT \l_@@_check_feat_bool
      {
        \fontspec_check_ot_feat:nF {#1}
          {
            \@@_warning:nx {icu-feature-not-exist-in-font} {#1}
            \bool_set_false:N \l_@@_proceed_bool
          }
      }

    \bool_if:NT \l_@@_proceed_bool
      {
        \@@_update_featstr:n {#2}

        \exp_args:Nx \@@_remove_clashing_featstr:n
          { #2 , \@@_swap_plus_minus:n {#2} , #3 }
      }
  }
\cs_generate_variant:Nn \@@_make_OT_feature:nnn {xxx}

\cs_new:Nn \@@_swap_plus_minus:n { \@@_swap_plus_minus_aux:NNNNN #1 }
\cs_new:Nn \@@_swap_plus_minus_aux:NNNNN
  { \str_case:nn {#1} { {+} {-#2#3#4#5} {-} {+#2#3#4#5} } }
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontspec_check_script:nTF}
% This macro takes an OpenType script tag and checks if it exists in the current
% font. The output boolean is \cmd\@tempswatrue. \cmd\l_fontspec_strnum_int\ is used to store
% the number corresponding to the script tag string.
%    \begin{macrocode}
\prg_new_conditional:Nnn \fontspec_check_script:n {TF}
  {
    \bool_if:NTF \l_@@_never_check_bool
      { \prg_return_true: }
%<*xetexx>
 {
  \@@_iv_str_to_num:Nn \l_fontspec_strnum_int {#1}
  \int_set:Nn \l_tmpb_int { \XeTeXOTcountscripts \l_fontspec_font }
  \int_zero:N \l_tmpa_int
  \bool_set_false:N \l__fontspec_check_bool
  \bool_until_do:nn { \int_compare_p:nNn \l_tmpa_int = \l_tmpb_int }
   {
    \ifnum \XeTeXOTscripttag\l_fontspec_font \l_tmpa_int = \l_fontspec_strnum_int
      \bool_set_true:N \l__fontspec_check_bool
      \int_set:Nn \l_tmpa_int {\l_tmpb_int}
    \else
      \int_incr:N \l_tmpa_int
    \fi
   }
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</xetexx>
%<*luatex>
 {
  \directlua{fontspec.check_ot_script("l_fontspec_font", "#1")}
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</luatex>
 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspec_check_lang:nTF}
% This macro takes an OpenType language tag and checks if it exists in the current
% font/script. The output boolean is \cmd\@tempswatrue. \cmd\l_fontspec_strnum_int\ is used to store
% the number corresponding to the language tag string.
% The script used is whatever's held in \cmd\l_fontspec_script_int. By default, that's the
% number corresponding to `|latn|'.
%    \begin{macrocode}
\prg_new_conditional:Nnn \fontspec_check_lang:n {TF}
  {
    \bool_if:NTF \l_@@_never_check_bool
      { \prg_return_true: }
%<*xetexx>
 {
  \@@_iv_str_to_num:Nn \l_fontspec_strnum_int {#1}
  \int_set:Nn \l_tmpb_int
   { \XeTeXOTcountlanguages \l_fontspec_font \l_fontspec_script_int }
  \int_zero:N \l_tmpa_int
  \bool_set_false:N \l__fontspec_check_bool
  \bool_until_do:nn { \int_compare_p:nNn \l_tmpa_int = \l_tmpb_int }
   {
    \ifnum\XeTeXOTlanguagetag\l_fontspec_font\l_fontspec_script_int \l_tmpa_int =\l_fontspec_strnum_int
      \bool_set_true:N \l__fontspec_check_bool
      \int_set:Nn \l_tmpa_int {\l_tmpb_int}
    \else
      \int_incr:N \l_tmpa_int
    \fi
   }
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</xetexx>
%<*luatex>
 {
  \directlua
   {
    fontspec.check_ot_lang( "l_fontspec_font", "#1", "\l_fontspec_script_tl" )
   }
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</luatex>
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspec_check_ot_feat:nTF}
% This macro takes an OpenType feature tag and checks if it exists in the current
% font/script/language.
% \cmd\l_fontspec_strnum_int\ is used to store the number corresponding to the feature tag string.
% The script used is whatever's held in \cmd\l_fontspec_script_int. By default, that's the
% number corresponding to `|latn|'. The language used is \cmd\l_fontspec_language_int,
% by default |0|, the `default language'.
%    \begin{macrocode}
\prg_new_conditional:Nnn \fontspec_check_ot_feat:n {TF,F}
  {
    \bool_if:NTF \l_@@_never_check_bool
      { \prg_return_true: }
%<*xetexx>
 {
  \int_set:Nn \l_tmpb_int
   {
    \XeTeXOTcountfeatures \l_fontspec_font
                          \l_fontspec_script_int
                          \l_fontspec_language_int
   }
  \@@_iv_str_to_num:Nn \l_fontspec_strnum_int {#1}
  \int_zero:N \l_tmpa_int
  \bool_set_false:N \l__fontspec_check_bool
  \bool_until_do:nn { \int_compare_p:nNn \l_tmpa_int = \l_tmpb_int }
   {
    \ifnum\XeTeXOTfeaturetag\l_fontspec_font\l_fontspec_script_int\l_fontspec_language_int
         \l_tmpa_int =\l_fontspec_strnum_int
      \bool_set_true:N \l__fontspec_check_bool
      \int_set:Nn \l_tmpa_int {\l_tmpb_int}
    \else
      \int_incr:N \l_tmpa_int
    \fi
   }
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</xetexx>
%<*luatex>
 {
  \directlua
   {
    fontspec.check_ot_feat(
                           "l_fontspec_font", "#1",
                           "\l_fontspec_lang_tl", "\l_fontspec_script_tl"
                          )
   }
  \bool_if:NTF \l__fontspec_check_bool \prg_return_true: \prg_return_false:
 }
%</luatex>
  }
%    \end{macrocode}
% \end{macro}
%
% \iffalse
%    \begin{macrocode}
%</fontspec&(xetexx|luatex)>
%    \end{macrocode}
% \fi

